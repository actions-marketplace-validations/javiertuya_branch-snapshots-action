# action.yml
name: 'Branch Snapshots Action'
description: 'Generates junit html style reports from surefire test results'
inputs:
  token:
    description: 'Token to access the GitHub Packages'
    required: true
  java-version:
    description: 'Version of java to build the package'
    required: true
  package-name:
    description: 'Name of the package to publish'
    required: true
  delete-old-versions:
    description: 'If true, only keep `min-versions-to-keep` versions (default is false)'
    required: false
    default: false
  min-versions-to-keep:
    description: 'The number of latest versions to keep if `delete-old-versions` is true (default is 2)'
    required: false
    default: 2
runs:
  using: "composite"
  steps:
      - name: Checkout GitHub repo
        uses: actions/checkout@v3
      - name: Select Java Version
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ inputs.java-version }}
          cache: 'maven'

      - name: Rename version to <version number>-<branch name>-SNAPSHOT
        shell: bash
        run: |
          oldversion=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Renaming old version: ${oldversion}"
          version=${oldversion//-SNAPSHOT/}
          version=${version}-${BRANCH_NAME}-SNAPSHOT
          echo "to new Version: $version"
          mvn versions:set -DnewVersion=$version --no-transfer-progress

      # manage package versions shows the date in which branch was created, not executed
      # if no changing version number, this will keep latest 2 branches BY BRANCH CREATION
      # because of this, deletion must be done BEFORE deploy (if not, a version of old branch can be deleted after being updated)
      # TODO check how to exclude current branch
      # NOTE at least one package must exist, if not the build fails (comment for the first build)
      - uses: actions/delete-package-versions@v4
        if: inputs.delete-old-versions == 'true'
        with: 
          package-name: ${{ inputs.package-name }}
          package-type: 'maven'
          min-versions-to-keep: ${{ inputs.min-versions-to-keep }}
          delete-only-pre-release-versions: "true"

      # note that deploy uses the profile that specifies the github repository server
      - name: Deploy to GitHub packages
        shell: bash
        run: mvn deploy -P publish-github -DskipTests=true -Dmaven.test.failure.ignore=true -U --no-transfer-progress
        env:
          GITHUB_TOKEN: ${{ inputs.token }}
